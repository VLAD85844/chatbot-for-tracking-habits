from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.api import create_habit, get_habits, mark_habit_done, create_user, update_habit, delete_habit
from telegram.error import BadRequest
import re
import logging


logger = logging.getLogger(__name__)
ADD_HABIT_NAME, ADD_HABIT_TIME = range(2)
TIME_REGEX = re.compile(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$')


async def start_add_habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    return ADD_HABIT_NAME


async def save_habit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    context.user_data['habit_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
    return ADD_HABIT_TIME


async def save_habit_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = update.message.from_user.id
    habit_name = context.user_data['habit_name']
    reminder_time = update.message.text.strip()

    if not TIME_REGEX.match(reminder_time):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")
        return ConversationHandler.END

    user_result = await create_user({
        "telegram_id": user_id,
        "username": update.message.from_user.username
    })

    if user_result.get("status") == "error":
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_result.get('message')}")
        return ConversationHandler.END

    result = await create_habit({
        "user_id": user_id,
        "name": habit_name,
        "reminder_time": reminder_time
    })

    if result.get("status") == "error":
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
    else:
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤ {reminder_time}!"
        )

    return ConversationHandler.END


async def list_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = update.message.from_user.id
    habits = await get_habits(telegram_id)

    if not habits or isinstance(habits, dict) and habits.get("status") == "error":
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫!")
        return

    text = "üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n" + "\n".join(
        f"{i + 1}. {h['name']} ({h['reminder_time']})"
        for i, h in enumerate(habits)
    )
    await update.message.reply_text(text)


async def mark_habit_done_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    user_id = update.message.from_user.id
    habits = await get_habits(user_id)

    if not habits:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏!")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(h["name"], callback_data=f"done_{h['id']}")]
        for h in habits
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É:", reply_markup=keyboard)


async def handle_done_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    habit_id = int(query.data.split("_")[1])
    telegram_id = query.from_user.id

    result = await mark_habit_done(habit_id, telegram_id)

    if result.get("status") == "error":
        await query.edit_message_text(f"‚ùå {result.get('message')}")
        return

    habits = await get_habits(telegram_id)
    text = "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞!\n\n" + "\n".join(
        f"{i + 1}. {h['name']} ({h['reminder_time']})"
        for i, h in enumerate(habits)
    )

    await query.edit_message_text(text=text)


async def start_edit_habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    telegram_id = update.message.from_user.id
    habits = await get_habits(telegram_id)

    if not habits:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return ConversationHandler.END

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(h["name"], callback_data=f"edit_{h['id']}")]
        for h in habits
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    return "SELECT_FIELD"


async def select_field_to_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    habit_id = int(query.data.split("_")[1])
    context.user_data["edit_habit_id"] = habit_id

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_name")],
        [InlineKeyboardButton("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="field_time")],
        [InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="field_active")],
    ])
    await query.edit_message_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    return "ENTER_NEW_VALUE"


async def enter_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    field = query.data.split('_')[1]
    context.user_data["edit_field"] = f"field_{field}"

    if field == "active":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞", callback_data="active_true")],
            [InlineKeyboardButton("‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞", callback_data="active_false")],
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—ã—á–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        field_name = "–Ω–∞–∑–≤–∞–Ω–∏–µ" if field == "name" else "–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_name}:")

    return "SAVE_CHANGES"


async def save_changes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        query = update.callback_query
        is_callback = query is not None

        if is_callback:
            await query.answer()
            if query.data.startswith("active_"):
                new_value = query.data == "active_true"
                update_data = {"is_active": new_value}
                message = query.message
            else:
                await query.edit_message_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                return ConversationHandler.END
        else:
            new_value = update.message.text
            message = update.message
            field = context.user_data.get("edit_field")

            if not field:
                await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª–µ")
                return ConversationHandler.END

            field_map = {
                "field_name": "name",
                "field_time": "reminder_time",
                "field_active": "is_active"
            }
            api_field = field_map.get(field)
            if not api_field:
                await message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ")
                return ConversationHandler.END

            if field == "field_time" and not TIME_REGEX.match(new_value):
                await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
                return "ENTER_NEW_VALUE"

            update_data = {api_field: new_value}

        habit_id = context.user_data["edit_habit_id"]
        result = await update_habit(habit_id, **update_data)

        response_text = ("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
                         if result.get("status") != "error"
                         else f"‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")

        if is_callback:
            await message.edit_text(response_text)
        else:
            await message.reply_text(response_text)

        context.user_data.clear()
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in save_changes: {e}", exc_info=True)
        error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"

        if is_callback:
            await query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)

        context.user_data.clear()
        return ConversationHandler.END


async def start_delete_habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    telegram_id = update.message.from_user.id
    habits = await get_habits(telegram_id)

    if not habits:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return ConversationHandler.END

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(h["name"], callback_data=f"delete_{h['id']}")]
        for h in habits
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    return "CONFIRM_DELETE"


async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    habit_id = int(query.data.split('_')[1])
    context.user_data["delete_habit_id"] = habit_id

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")],
    ]
    await query.edit_message_text(
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return "CONFIRM_DELETE"


async def execute_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_no":
        await query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END

    try:
        habit_id = context.user_data.get("delete_habit_id")
        if not habit_id:
            habit_id = int(query.data.split("_")[1]) if "_" in query.data else None

        if not habit_id:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return ConversationHandler.END

        telegram_id = query.from_user.id
        result = await delete_habit(habit_id, telegram_id)

        if result.get("status") == "error":
            await query.edit_message_text(f"‚ùå {result.get('message')}")
        else:
            await query.edit_message_text("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"Error in execute_delete: {e}", exc_info=True)
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

    context.user_data.clear()
    return ConversationHandler.END